"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Github,
  Container,
  Loader2,
  CheckCircle,
  AlertCircle,
  Copy,
  Download,
  GitCommit,
} from "lucide-react";
import { apiClient } from "@/lib/api";

interface GenerationResult {
  dockerfile: string;
  techStack: string[];
  buildStatus: "pending" | "building" | "success" | "error";
  error?: string;
}

export default function Home() {
  const [githubUrl, setGithubUrl] = useState("");
  const [githubToken, setGithubToken] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [result, setResult] = useState<GenerationResult | null>(null);
  const [error, setError] = useState("");
  const [generationId, setGenerationId] = useState<string | null>(null);
  const [isPushing, setIsPushing] = useState(false);
  const [pushSuccess, setPushSuccess] = useState(false);
  const [pollTimeout, setPollTimeout] = useState<NodeJS.Timeout | null>(null);

  const handleGenerate = async () => {
    if (!githubUrl || !githubToken) {
      setError("Please provide both GitHub URL and Personal Access Token");
      return;
    }

    if (pollTimeout) clearTimeout(pollTimeout);
    setIsGenerating(true);
    setError("");
    setResult(null);

    try {
      const response = await apiClient.generateDockerfile({
        githubUrl,
        githubToken,
      });

      const fullGenerationId = response.generationId?.toString() || "";
      if (!fullGenerationId) {
        setError("Invalid generation ID received from server");
        setIsGenerating(false);
        return;
      }

      setGenerationId(fullGenerationId);

      const pollStatus = async () => {
        try {
          const statusResponse = await apiClient.getGenerationStatus(fullGenerationId);
          const generation = statusResponse.generation;
          setResult({
            dockerfile: generation.dockerfile,
            techStack: generation.techStack,
            buildStatus: generation.buildStatus,
            error: generation.error,
          });

          if (generation.buildStatus === "building" || generation.buildStatus === "pending") {
            const timeout = setTimeout(pollStatus, 2000);
            setPollTimeout(timeout);
          } else {
            setIsGenerating(false);
          }
        } catch {
          setIsGenerating(false);
          setError("Error fetching generation status.");
        }
      };

      setTimeout(pollStatus, 1000);
    } catch (err) {
      setError("Failed to generate Dockerfile. Please try again.");
      setIsGenerating(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
    } catch {
      console.error("Failed to copy");
    }
  };

  const downloadDockerfile = () => {
    if (!result?.dockerfile) return;
    const blob = new Blob([result.dockerfile], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "Dockerfile";
    a.click();
    URL.revokeObjectURL(url);
  };

  const pushDockerfileToRepository = async () => {
    if (!generationId || !result?.dockerfile) return;
    setIsPushing(true);
    setPushSuccess(false);
    setError("");

    try {
      await apiClient.pushDockerfileToRepository(generationId, "Add Dockerfile generated by DockGen AI");
      setPushSuccess(true);
    } catch {
      setError("Failed to push Dockerfile to repository");
    } finally {
      setIsPushing(false);
    }
  };

  useEffect(() => {
    return () => {
      if (pollTimeout) clearTimeout(pollTimeout);
    };
  }, [pollTimeout]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-950 to-gray-900 text-gray-100">
      <div className="container mx-auto px-4 py-10">
        {/* Header */}
        <header className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-3">
            <Container className="h-10 w-10 text-indigo-500" />
            <h1 className="text-4xl font-bold tracking-tight">Docker File Generator</h1>
          </div>
          <p className="text-gray-400 max-w-2xl mx-auto">
            Instantly build and generate Dockerfiles for your GitHub repositories.
          </p>
        </header>

        <div className="max-w-3xl mx-auto space-y-8">
          {/* Input Card */}
          <Card className="bg-gray-900/60 border border-gray-800 shadow-xl backdrop-blur-md">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-indigo-400">
                <Github className="h-5 w-5" /> GitHub Repository
              </CardTitle>
              <CardDescription className="text-gray-400">
                Enter your repository URL and personal access token to begin.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-5">
              <div>
                <label className="text-sm text-gray-300 mb-1 block">Repository URL</label>
                <Input
                  type="url"
                  placeholder="https://github.com/username/repository"
                  value={githubUrl}
                  onChange={(e) => setGithubUrl(e.target.value)}
                  disabled={isGenerating}
                  className="bg-gray-800 border-gray-700 text-gray-100 placeholder:text-gray-500"
                />
              </div>
              <div>
                <label className="text-sm text-gray-300 mb-1 block">Personal Access Token</label>
                <Input
                  type="password"
                  placeholder="ghp_xxxxxxxxxxxxxxxxxxxx"
                  value={githubToken}
                  onChange={(e) => setGithubToken(e.target.value)}
                  disabled={isGenerating}
                  className="bg-gray-800 border-gray-700 text-gray-100 placeholder:text-gray-500"
                />
              </div>

              <Button
                onClick={handleGenerate}
                disabled={isGenerating || !githubUrl || !githubToken}
                className="w-full bg-indigo-600 hover:bg-indigo-700 transition-all duration-300"
                size="lg"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generating...
                  </>
                ) : (
                  <>
                    <Container className="mr-2 h-4 w-4" /> Generate Dockerfile
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Error */}
          {error && (
            <Alert className="bg-red-900/30 border-red-700 text-red-300">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* Results */}
          {result && (
            <div className="space-y-6">
              <Card className="bg-gray-900/60 border border-gray-800 shadow-lg backdrop-blur-md">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-green-400">
                    <CheckCircle className="h-5 w-5" /> Detected Tech Stack
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {result.techStack.map((tech) => (
                      <Badge key={tech} variant="secondary" className="bg-gray-800 text-gray-200">
                        {tech}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900/60 border border-gray-800 shadow-lg backdrop-blur-md">
                <CardHeader>
                  <CardTitle className="text-indigo-400">Generated Dockerfile</CardTitle>
                  <CardDescription className="text-gray-400">
                    AI-generated Dockerfile optimized for your project
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Textarea
                    value={result.dockerfile}
                    readOnly
                    className="min-h-[300px] font-mono bg-gray-800 border-gray-700 text-gray-100"
                  />
                  <div className="mt-4 flex flex-wrap gap-3">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => copyToClipboard(result.dockerfile)}
                      className="bg-gray-800 border border-gray-600 text-gray-100 hover:bg-gray-700 transition-colors"
                    >
                      <Copy className="mr-2 h-4 w-4" /> Copy
                    </Button>

                    <Button
                      variant="outline"
                      size="sm"
                      onClick={downloadDockerfile}
                      className="bg-gray-800 border border-gray-600 text-gray-100 hover:bg-gray-700 transition-colors"
                    >
                      <Download className="mr-2 h-4 w-4" /> Download
                    </Button>

                    <Button
                      variant="default"
                      size="sm"
                      onClick={pushDockerfileToRepository}
                      disabled={isPushing || !generationId}
                      className="bg-green-600 hover:bg-green-700 text-gray-100 transition-colors disabled:opacity-50"
                    >
                      {isPushing ? (
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      ) : (
                        <GitCommit className="mr-2 h-4 w-4" />
                      )}
                      {isPushing ? "Pushing..." : "Push to Repo"}
                    </Button>
                  </div>

                  {pushSuccess && (
                    <p className="mt-3 text-sm text-green-500">
                      ✅ Dockerfile successfully pushed to repository!
                    </p>
                  )}
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
