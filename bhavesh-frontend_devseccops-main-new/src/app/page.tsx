"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Github, Container, Loader2, CheckCircle, AlertCircle, Copy, Download, GitCommit } from "lucide-react";
import { apiClient } from "@/lib/api";

interface GenerationResult {
  dockerfile: string;
  techStack: string[];
  buildStatus: 'pending' | 'building' | 'success' | 'error';
  error?: string;
}

export default function Home() {
  const [githubUrl, setGithubUrl] = useState("");
  const [githubToken, setGithubToken] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [result, setResult] = useState<GenerationResult | null>(null);
  const [error, setError] = useState("");
  const [generationId, setGenerationId] = useState<string | null>(null);
  const [isPushing, setIsPushing] = useState(false);
  const [pushSuccess, setPushSuccess] = useState(false);
  const [pollTimeout, setPollTimeout] = useState<NodeJS.Timeout | null>(null);
  const [isStopping, setIsStopping] = useState(false);

  const handleGenerate = async () => {
    if (!githubUrl || !githubToken) {
      setError("Please provide both GitHub URL and Personal Access Token");
      return;
    }

    if (pollTimeout) {
      clearTimeout(pollTimeout);
      setPollTimeout(null);
    }

    setIsGenerating(true);
    setIsStopping(false);
    setError("");
    setResult(null);

    try {
      const response = await apiClient.generateDockerfile({ githubUrl, githubToken });
      const fullGenerationId = response.generationId?.toString() || "";

      if (!fullGenerationId) {
        setError("Invalid generation ID received from server");
        setIsGenerating(false);
        return;
      }

      setGenerationId(fullGenerationId);

      let pollCount = 0;
      const startTime = Date.now();

      const pollStatus = async () => {
        try {
          pollCount++;
          const statusResponse = await apiClient.getGenerationStatus(fullGenerationId);
          const generation = statusResponse.generation;

          if (generation.dockerfile || generation.techStack.length > 0) {
            setResult({
              dockerfile: generation.dockerfile,
              techStack: generation.techStack,
              buildStatus: generation.buildStatus,
              error: generation.error,
            });
          }

          const elapsedTime = Date.now() - startTime;
          const shouldStop = generation.buildStatus === "success" || generation.buildStatus === "error" || elapsedTime > 120000;

          if (!shouldStop) {
            const timeout = setTimeout(pollStatus, 2000);
            setPollTimeout(timeout);
          } else {
            setIsGenerating(false);
            setPollTimeout(null);
          }
        } catch {
          setIsGenerating(false);
          setPollTimeout(null);
          setError("Error while polling. Please try again.");
        }
      };

      const initialTimeout = setTimeout(pollStatus, 1000);
      setPollTimeout(initialTimeout);
    } catch {
      setError("Failed to generate Dockerfile. Please try again.");
      setIsGenerating(false);
    }
  };

  const handleStopGeneration = () => {
    setIsStopping(true);
    setIsGenerating(false);
    if (pollTimeout) {
      clearTimeout(pollTimeout);
      setPollTimeout(null);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
    } catch (err) {
      console.error("Failed to copy:", err);
    }
  };

  const downloadDockerfile = () => {
    if (!result?.dockerfile) return;
    const blob = new Blob([result.dockerfile], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "Dockerfile";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const pushDockerfileToRepository = async () => {
    if (!generationId || !result?.dockerfile) return;
    setIsPushing(true);
    setPushSuccess(false);
    setError("");
    try {
      await apiClient.pushDockerfileToRepository(generationId, "Add Dockerfile generated by DockGen AI");
      setPushSuccess(true);
    } catch {
      setError("Failed to push Dockerfile to repository");
    } finally {
      setIsPushing(false);
    }
  };

  useEffect(() => {
    return () => {
      if (pollTimeout) clearTimeout(pollTimeout);
    };
  }, [pollTimeout]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#0f172a] to-[#1e293b] text-gray-100">
      <div className="container mx-auto px-4 py-10">
        {/* Header */}
        <div className="text-center mb-10">
          <div className="flex items-center justify-center gap-3 mb-3">
            <Container className="h-8 w-8 text-blue-400" />
            <h1 className="text-4xl font-bold text-white">DockGen AI</h1>
          </div>
          <p className="text-gray-400 text-lg">
            AI-Powered Dockerfile Generator & Image Builder
          </p>
        </div>

        <div className="max-w-4xl mx-auto space-y-8">
          {/* Input Card */}
          <Card className="bg-gray-900/60 border border-gray-700 backdrop-blur-md shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-blue-400">
                <Github className="h-5 w-5" />
                GitHub Repository
              </CardTitle>
              <CardDescription className="text-gray-400">
                Enter your GitHub repository URL and Personal Access Token
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm mb-2 text-gray-300">
                  GitHub Repository URL
                </label>
                <Input
                  className="bg-gray-800 border-gray-700 text-gray-100 placeholder-gray-500 focus:border-blue-500"
                  type="url"
                  placeholder="https://github.com/username/repository"
                  value={githubUrl}
                  onChange={(e) => setGithubUrl(e.target.value)}
                  disabled={isGenerating}
                />
              </div>
              <div>
                <label className="block text-sm mb-2 text-gray-300">
                  Personal Access Token
                </label>
                <Input
                  className="bg-gray-800 border-gray-700 text-gray-100 placeholder-gray-500 focus:border-blue-500"
                  type="password"
                  placeholder="ghp_xxxxxxxxxxxxxxxxxxxx"
                  value={githubToken}
                  onChange={(e) => setGithubToken(e.target.value)}
                  disabled={isGenerating}
                />
              </div>

              <div className="space-y-2">
                <Button
                  onClick={handleGenerate}
                  disabled={isGenerating || !githubUrl || !githubToken}
                  className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-500 hover:to-indigo-500 text-white"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating Dockerfile...
                    </>
                  ) : (
                    <>
                      <Container className="mr-2 h-4 w-4" />
                      Generate Dockerfile
                    </>
                  )}
                </Button>

                {isGenerating && (
                  <Button
                    onClick={handleStopGeneration}
                    variant="destructive"
                    className="w-full bg-red-600 hover:bg-red-500"
                  >
                    Stop Dockerfile Generation
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Error Alert */}
          {error && (
            <Alert className="bg-red-900/50 border border-red-700 text-red-300">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* Results */}
          {result && (
            <div className="space-y-8">
              {/* Tech Stack */}
              <Card className="bg-gray-900/60 border border-gray-700 backdrop-blur-md shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-green-400">
                    <CheckCircle className="h-5 w-5" />
                    Detected Tech Stack
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {result.techStack.map((tech) => (
                      <Badge
                        key={tech}
                        className="bg-gray-800 text-blue-300 border border-gray-700"
                      >
                        {tech}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Dockerfile Output */}
              <Card className="bg-gray-900/60 border border-gray-700 backdrop-blur-md shadow-lg">
                <CardHeader>
                  <CardTitle className="text-purple-400">Generated Dockerfile</CardTitle>
                  <CardDescription className="text-gray-400">
                    AI-generated Dockerfile optimized for your project
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Textarea
                    value={result.dockerfile}
                    readOnly
                    className="min-h-[300px] font-mono text-sm bg-gray-800 text-gray-100 border-gray-700"
                  />
                  <div className="mt-4 flex flex-wrap gap-2">
                    <Button
                      onClick={() => copyToClipboard(result.dockerfile)}
                      className="bg-gradient-to-r from-indigo-500 to-blue-600 text-white hover:from-indigo-600 hover:to-blue-700 transition-all duration-300 shadow-md hover:shadow-blue-500/30"
                    >
                      <Copy className="mr-2 h-4 w-4" />
                      Copy
                    </Button>

                    <Button
                      onClick={downloadDockerfile}
                      className="bg-gradient-to-r from-purple-500 to-pink-600 text-white hover:from-purple-600 hover:to-pink-700 transition-all duration-300 shadow-md hover:shadow-pink-500/30"
                    >
                      <Download className="mr-2 h-4 w-4" />
                      Download
                    </Button>

                    <Button
                      onClick={pushDockerfileToRepository}
                      disabled={isPushing || !generationId}
                      className={`text-white transition-all duration-300 shadow-md ${isPushing
                          ? "bg-gradient-to-r from-gray-600 to-gray-700 cursor-not-allowed"
                          : "bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 hover:shadow-purple-500/30"
                        }`}
                    >
                      {isPushing ? (
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      ) : (
                        <GitCommit className="mr-2 h-4 w-4" />
                      )}
                      {isPushing ? "Pushing..." : "Push to Repo"}
                    </Button>
                  </div>

                  {pushSuccess && (
                    <div className="mt-2 text-sm text-green-400">
                      ✅ Dockerfile successfully pushed to repository!
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
